{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = function () {\n  return {\n    \"margin-top.px\": 10\n  };\n};\nconst _c1 = function () {\n  return {\n    \"margin-left.px\": 10\n  };\n};\nexport class EditCustomerComponent {\n  constructor(route, router, http, formBuilder) {\n    this.route = route;\n    this.router = router;\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.customerId = '';\n    this.customer = {\n      id: '',\n      firstname: '',\n      lastname: '',\n      email: '',\n      phone: '',\n      countrycode: '',\n      gender: '',\n      balance: 0,\n      salutation: '',\n      initials: '',\n      firstnameAscii: '',\n      firstnameCountryRank: '',\n      lastnameCountryFrequency: '',\n      password: '',\n      countryCodeAlpha: '',\n      countryName: '',\n      primaryLanguageCode: '',\n      primaryLanguage: '',\n      phoneNumber: '',\n      currency: ''\n    };\n    this.editForm = this.formBuilder.group({\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: [''],\n      countrycode: [''],\n      gender: [''],\n      balance: ['']\n    });\n  }\n  ngOnInit() {\n    const customerIdParam = this.route.snapshot.paramMap.get('id');\n    if (customerIdParam !== null) {\n      this.customerId = customerIdParam;\n      // Fetch customer details and populate the form\n      this.http.get(`/api/customer/getcustomerbyid/${this.customerId}`).subscribe(result => {\n        this.customer = result;\n        this.editForm.patchValue(this.customer);\n      }, error => {\n        console.error('Error fetching customer details:', error);\n      });\n    }\n  }\n  saveChanges() {\n    // if (this.editForm.valid) {\n    //   const updatedCustomer = { ...this.customer, ...this.editForm.value };\n    //   this.http.put(`/api/customer/updatecustomer/${this.customerId}`, updatedCustomer).subscribe(\n    //     () => {\n    //       this.router.navigate(['/customer']);\n    //     },\n    //     error => {\n    //       console.error('Error updating customer:', error);\n    //       // Check if the error response contains validation errors\n    //       if (error.error && error.error.errors) {\n    //         const validationErrors = error.error.errors;\n    //         console.error('Validation errors:', validationErrors);\n    //         // You can handle the validation errors here, such as displaying them to the user\n    //       }\n    //     }\n    //   );\n    // }\n    if (this.editForm.valid) {\n      const updatedCustomer = {\n        ...this.customer,\n        ...this.editForm.value\n      };\n      // Replace null values with empty strings\n      for (const key in updatedCustomer) {\n        if (updatedCustomer.hasOwnProperty(key) && updatedCustomer[key] === null) {\n          updatedCustomer[key] = '';\n        }\n      }\n      this.http.put(`/api/customer/updatecustomer/${this.customerId}`, updatedCustomer).subscribe(() => {\n        this.router.navigate(['/customer']);\n      }, error => {\n        console.error('Error updating customer:', error);\n        // Handle validation errors and replace null values with empty strings\n        if (error.error && error.error.errors) {\n          const validationErrors = error.error.errors;\n          // Replace null values with empty strings in validation errors\n          for (const key in validationErrors) {\n            if (validationErrors.hasOwnProperty(key) && validationErrors[key][0] === `The ${key} field is required.`) {\n              validationErrors[key] = [''];\n            }\n          }\n          console.error('Validation errors:', validationErrors);\n          // You can handle the validation errors here, such as displaying them to the user\n        }\n      });\n    }\n  }\n\n  cancelEdit() {\n    this.router.navigate(['/customer']);\n  }\n}\nEditCustomerComponent.ɵfac = function EditCustomerComponent_Factory(t) {\n  return new (t || EditCustomerComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nEditCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditCustomerComponent,\n  selectors: [[\"app-edit-customer\"]],\n  decls: 37,\n  vars: 5,\n  consts: [[1, \"edit-customer-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"firstname\"], [\"type\", \"text\", \"id\", \"firstname\", \"formControlName\", \"firstname\", 1, \"form-control\"], [\"for\", \"lastname\"], [\"type\", \"text\", \"id\", \"lastname\", \"formControlName\", \"lastname\", 1, \"form-control\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"phone\"], [\"type\", \"text\", \"id\", \"phone\", \"formControlName\", \"phone\", 1, \"form-control\"], [\"for\", \"countrycode\"], [\"type\", \"text\", \"id\", \"countrycode\", \"formControlName\", \"countrycode\", 1, \"form-control\"], [\"for\", \"gender\"], [\"type\", \"text\", \"id\", \"gender\", \"formControlName\", \"gender\", 1, \"form-control\"], [\"for\", \"balance\"], [\"type\", \"number\", \"id\", \"balance\", \"formControlName\", \"balance\", 1, \"form-control\"], [1, \"form-group\", 3, \"ngStyle\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"ngStyle\", \"click\"]],\n  template: function EditCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Edit Customer\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function EditCustomerComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.saveChanges();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n      i0.ɵɵtext(14, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 2)(17, \"label\", 9);\n      i0.ɵɵtext(18, \"Phone\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 2)(21, \"label\", 11);\n      i0.ɵɵtext(22, \"Country Code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 2)(25, \"label\", 13);\n      i0.ɵɵtext(26, \"Gender\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(27, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\", 2)(29, \"label\", 15);\n      i0.ɵɵtext(30, \"Balance\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"div\", 17)(33, \"button\", 18);\n      i0.ɵɵtext(34, \"Save Changes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"button\", 19);\n      i0.ɵɵlistener(\"click\", function EditCustomerComponent_Template_button_click_35_listener() {\n        return ctx.cancelEdit();\n      });\n      i0.ɵɵtext(36, \"Cancel\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.editForm);\n      i0.ɵɵadvance(29);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(3, _c0));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(4, _c1));\n    }\n  },\n  dependencies: [i4.NgStyle, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","EditCustomerComponent","constructor","route","router","http","formBuilder","id","firstname","lastname","email","phone","countrycode","gender","balance","salutation","initials","firstnameAscii","firstnameCountryRank","lastnameCountryFrequency","password","countryCodeAlpha","countryName","primaryLanguageCode","primaryLanguage","phoneNumber","currency","editForm","group","required","ngOnInit","customerIdParam","snapshot","paramMap","get","customerId","subscribe","result","customer","patchValue","error","console","saveChanges","valid","updatedCustomer","value","key","hasOwnProperty","put","navigate","errors","validationErrors","cancelEdit","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Tanu\\source\\repos\\FieldEdgeCodeChallenge\\FieldEdgeCodeChallenge\\ClientApp\\src\\app\\customer\\edit-customer\\edit-customer.component.ts","C:\\Users\\Tanu\\source\\repos\\FieldEdgeCodeChallenge\\FieldEdgeCodeChallenge\\ClientApp\\src\\app\\customer\\edit-customer\\edit-customer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Customer } from '../customer.model';\n\n@Component({\n  selector: 'app-edit-customer',\n  templateUrl: './edit-customer.component.html',\n  styleUrls: ['./edit-customer.component.css']\n})\nexport class EditCustomerComponent implements OnInit {\n  customerId: string= '';\n  customer: Customer = {\n    id: '',\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    countrycode: '',\n    gender: '',\n    balance: 0,\n    salutation:'',\n    initials:'',\n    firstnameAscii:'',\n    firstnameCountryRank:'',\n    lastnameCountryFrequency:'',\n    password:'',\n    countryCodeAlpha:'',\n    countryName:'',\n    primaryLanguageCode:'',\n    primaryLanguage:'',\n    phoneNumber:'',\n    currency:'',\n  };\n  editForm: FormGroup; // Declare the editForm property\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private http: HttpClient,\n    private formBuilder: FormBuilder\n  ) {\n    this.editForm = this.formBuilder.group({\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone: [''],\n      countrycode: [''],\n      gender: [''],\n      balance: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    const customerIdParam = this.route.snapshot.paramMap.get('id');\n    if (customerIdParam !== null) {\n      this.customerId = customerIdParam;\n\n      // Fetch customer details and populate the form\n      this.http.get<Customer>(`/api/customer/getcustomerbyid/${this.customerId}`).subscribe(\n        result => {\n          this.customer = result;\n          this.editForm.patchValue(this.customer);\n        },\n        error => {\n          console.error('Error fetching customer details:', error);\n        }\n      );\n    }\n  }\n\n  saveChanges(): void {\n    // if (this.editForm.valid) {\n    //   const updatedCustomer = { ...this.customer, ...this.editForm.value };\n    //   this.http.put(`/api/customer/updatecustomer/${this.customerId}`, updatedCustomer).subscribe(\n    //     () => {\n    //       this.router.navigate(['/customer']);\n    //     },\n    //     error => {\n    //       console.error('Error updating customer:', error);\n\n    //       // Check if the error response contains validation errors\n    //       if (error.error && error.error.errors) {\n    //         const validationErrors = error.error.errors;\n    //         console.error('Validation errors:', validationErrors);\n    //         // You can handle the validation errors here, such as displaying them to the user\n    //       }\n    //     }\n    //   );\n    // }\n    if (this.editForm.valid) {\n      const updatedCustomer = { ...this.customer, ...this.editForm.value };\n    \n      // Replace null values with empty strings\n      for (const key in updatedCustomer) {\n        if (updatedCustomer.hasOwnProperty(key) && updatedCustomer[key] === null) {\n          updatedCustomer[key] = '';\n        }\n      }\n    \n      this.http.put(`/api/customer/updatecustomer/${this.customerId}`, updatedCustomer).subscribe(\n        () => {\n          this.router.navigate(['/customer']);\n        },\n        error => {\n          console.error('Error updating customer:', error);\n    \n          // Handle validation errors and replace null values with empty strings\n          if (error.error && error.error.errors) {\n            const validationErrors = error.error.errors;\n    \n            // Replace null values with empty strings in validation errors\n            for (const key in validationErrors) {\n              if (validationErrors.hasOwnProperty(key) && validationErrors[key][0] === `The ${key} field is required.`) {\n                validationErrors[key] = [''];\n              }\n            }\n    \n            console.error('Validation errors:', validationErrors);\n            // You can handle the validation errors here, such as displaying them to the user\n          }\n        }\n      );\n    }\n    \n  }\n\n  cancelEdit(): void {\n    this.router.navigate(['/customer']);\n  }\n}","<div class=\"edit-customer-container\">\n  <h2>Edit Customer</h2>\n  <form [formGroup]=\"editForm\" (ngSubmit)=\"saveChanges()\">\n    <div class=\"form-group\">\n      <label for=\"firstname\">First Name</label>\n      <input type=\"text\" id=\"firstname\" formControlName=\"firstname\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"lastname\">Last Name</label>\n      <input type=\"text\" id=\"lastname\" formControlName=\"lastname\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"email\">Email</label>\n      <input type=\"email\" id=\"email\" formControlName=\"email\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"phone\">Phone</label>\n      <input type=\"text\" id=\"phone\" formControlName=\"phone\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"countrycode\">Country Code</label>\n      <input type=\"text\" id=\"countrycode\" formControlName=\"countrycode\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"gender\">Gender</label>\n      <input type=\"text\" id=\"gender\" formControlName=\"gender\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"balance\">Balance</label>\n      <input type=\"number\" id=\"balance\" formControlName=\"balance\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\" [ngStyle]=\"{ 'margin-top.px': 10 }\">\n    <button type=\"submit\" class=\"btn btn-primary\">Save Changes</button>\n    <button type=\"button\" class=\"btn btn-secondary\" [ngStyle]=\"{ 'margin-left.px': 10 }\" (click)=\"cancelEdit()\">Cancel</button>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}